"""
Script de Instalaci√≥n de Dependencias
Instala todas las dependencias necesarias para el proyecto de an√°lisis macroecon√≥mico
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """Ejecuta un comando y maneja errores."""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - COMPLETADO")
            if result.stdout:
                print("üìä Salida:")
                print(result.stdout[-300:])  # √öltimas 300 caracteres
        else:
            print(f"‚ùå {description} - ERROR")
            print("Error:", result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Error ejecutando {description}: {str(e)}")
        return False
    
    return True

def check_python_version():
    """Verifica la versi√≥n de Python."""
    print("üêç VERIFICANDO VERSI√ìN DE PYTHON")
    print("=" * 50)
    
    version = sys.version_info
    print(f"Python version: {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå ERROR: Se requiere Python 3.8 o superior")
        print("Por favor, actualiza Python antes de continuar")
        return False
    
    print("‚úÖ Versi√≥n de Python compatible")
    return True

def upgrade_pip():
    """Actualiza pip a la √∫ltima versi√≥n."""
    return run_command(
        f"{sys.executable} -m pip install --upgrade pip",
        "Actualizando pip"
    )

def install_requirements():
    """Instala las dependencias desde requirements.txt."""
    if not os.path.exists("requirements.txt"):
        print("‚ùå ERROR: No se encuentra requirements.txt")
        return False
    
    return run_command(
        f"{sys.executable} -m pip install -r requirements.txt",
        "Instalando dependencias desde requirements.txt"
    )

def install_optional_dependencies():
    """Instala dependencias opcionales que pueden fallar."""
    optional_packages = [
        "geopandas>=0.14.0",
        "folium>=0.15.0", 
        "great-expectations>=0.18.0",
        "numba>=0.58.0"
    ]
    
    print(f"\nüì¶ INSTALANDO DEPENDENCIAS OPCIONALES")
    print("=" * 50)
    
    for package in optional_packages:
        print(f"Instalando {package}...")
        success = run_command(
            f"{sys.executable} -m pip install {package}",
            f"Instalando {package}"
        )
        if not success:
            print(f"‚ö†Ô∏è  Advertencia: No se pudo instalar {package}")
            print("El proyecto funcionar√° sin esta dependencia")

def verify_installation():
    """Verifica que las dependencias principales est√©n instaladas."""
    print(f"\nüîç VERIFICANDO INSTALACI√ìN")
    print("=" * 50)
    
    critical_packages = [
        "pandas", "numpy", "plotly", "streamlit", 
        "scikit-learn", "requests", "matplotlib"
    ]
    
    missing_packages = []
    
    for package in critical_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} - NO INSTALADO")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  Paquetes faltantes: {missing_packages}")
        return False
    
    print(f"\nüéâ ¬°TODAS LAS DEPENDENCIAS CR√çTICAS INSTALADAS!")
    return True

def main():
    """Funci√≥n principal de instalaci√≥n."""
    print("üéØ INSTALADOR DE DEPENDENCIAS - AN√ÅLISIS MACROECON√ìMICO")
    print("=" * 70)
    print("Este script instalar√° todas las dependencias necesarias")
    print("para el proyecto de an√°lisis macroecon√≥mico y predicciones 2030")
    print("=" * 70)
    
    # Verificar Python
    if not check_python_version():
        return
    
    # Actualizar pip
    if not upgrade_pip():
        print("‚ö†Ô∏è  Advertencia: No se pudo actualizar pip")
    
    # Instalar dependencias principales
    if not install_requirements():
        print("‚ùå Error instalando dependencias principales")
        return
    
    # Instalar dependencias opcionales
    install_optional_dependencies()
    
    # Verificar instalaci√≥n
    if verify_installation():
        print(f"\n{'='*70}")
        print("üéâ ¬°INSTALACI√ìN COMPLETADA EXITOSAMENTE!")
        print("=" * 70)
        print("\nüìã Pr√≥ximos pasos:")
        print("  1. python launch_all.py          # Lanzar todo el proyecto")
        print("  2. python launch_analysis.py     # Solo an√°lisis")
        print("  3. python launch_dashboards.py   # Solo dashboards")
        print("\nüéõÔ∏è Dashboards disponibles:")
        print("  - Predicciones 2030: http://localhost:8506")
        print("  - Equilibrio Macro: http://localhost:8507")
        print("  - Estructura Productiva: http://localhost:8508")
        print("  - Conectividad Global: http://localhost:8509")
        print("  - Resiliencia Econ√≥mica: http://localhost:8510")
    else:
        print(f"\n{'='*70}")
        print("‚ö†Ô∏è  INSTALACI√ìN COMPLETADA CON ADVERTENCIAS")
        print("Algunas dependencias opcionales no se pudieron instalar")
        print("El proyecto deber√≠a funcionar con las dependencias cr√≠ticas")
    
    print(f"{'='*70}")

if __name__ == "__main__":
    main()

